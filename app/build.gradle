apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "android.mcsoft.com.livewallpaperdemo"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "API","SCHEDULER"

    productFlavors {

        minApi17 {
            dimension "API"
            minSdkVersion 17
            versionCode 1000
            applicationIdSuffix ".minApi17"
        }

        minApi21 {
            dimension "API"
            minSdkVersion 21
            versionCode 2000
            applicationIdSuffix ".minApi21"
        }

        minApi23 {
            dimension "API"
            minSdkVersion 23
            versionCode 3000
            applicationIdSuffix ".minApi23"
        }

        jobApi17 {
            dimension "SCHEDULER"
            minSdkVersion 17
            versionCode 5000
        }

        jobApi21 {
            dimension "SCHEDULER"
            minSdkVersion 21
            versionCode 6000
        }

    }
    compileOptions {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("minApi17") && names.contains("jobApi21")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
        if (names.contains("minApi21") && names.contains("jobApi17")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
        if (names.contains("minApi23") && names.contains("jobApi17")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    // ButterKnife
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
}
